# Comprehensive Vexel Language Test Suite

print "=== VEXEL LANGUAGE FEATURE TEST ==="
print ""

# 1. Basic Variables and Data Types
print "1. BASIC DATA TYPES:"
set num 42
set str "Hello, Vexel!"
set bool true
set nothing null
print num
print str
print bool
print nothing
print ""

# 2. Arrays
print "2. ARRAYS:"
set arr [1, 2, 3, 4, 5]
print arr
set mixed [1, "two", true, null, [5, 6]]
print mixed
print ""

# 3. Objects (including nested)
print "3. OBJECTS:"
set person {
    name: "Alice",
    age: 30,
    active: true,
    address: {
        street: "123 Main St",
        city: "Boston",
        coordinates: {lat: 42, lng: 71}
    },
    hobbies: ["coding", "reading", "gaming"]
}
print person
print ""

# 4. Property Access
print "4. PROPERTY ACCESS:"
print person.name
print person.address.city
print person.address.coordinates.lat
print ""

# 5. Property Modification
print "5. PROPERTY MODIFICATION:"
set person.age 31
set person.address.city "Cambridge"
print person.age
print person.address.city
print ""

# 6. Dynamic Property Creation
print "6. DYNAMIC PROPERTY CREATION:"
set car {brand: "Toyota"}
set car.model "Camry"
set car.specs {engine: "V6", year: 2023}
print car
print ""

# 7. Comparisons
print "7. COMPARISONS:"
set x 10
set y 20
print "x == 10:"
print x == 10
print "x != y:"
print x != y
print "x < y:"
print x < y
print "y > x:"
print y > x
print ""

# 8. If Statements
print "8. IF STATEMENTS:"
if x < y
    print "x is less than y"
end
if bool
    print "bool is true"
end
print ""

# 9. Functions
print "9. FUNCTIONS:"
function greet(name)
    print "Hello, "
    print name
    print "!"
end

greet("World")
print ""

# 10. For Loops
print "10. FOR LOOPS:"
for i in [1, 2, 3]
    print i
end

print "Iterating over person's hobbies:"
for hobby in person.hobbies
    print hobby
end
print ""

# 11. While Loops
print "11. WHILE LOOPS:"
set counter 0
while counter < 3
    print counter
    set counter math_add(counter, 1)
end
print ""

# 12. Array Functions
print "12. ARRAY FUNCTIONS:"
set nums [3, 1, 4, 1, 5]
print "Original array:"
print nums
print "Length:"
print array_length(nums)
print "Get element at index 2:"
print array_get(nums, 2)
print "Push 6:"
print array_push(nums, 6)
print "Array to string:"
print array_to_string(nums)
print "Range 0-4:"
print array_range(5)
print ""

# 13. String Functions
print "13. STRING FUNCTIONS:"
set text "  Hello World  "
print "Original:"
print text
print "Length:"
print string_length(text)
print "Uppercase:"
print string_to_upper(text)
print "Lowercase:"
print string_to_lower(text)
print "Trimmed:"
print string_trim(text)
print "Contains 'World':"
print string_contains(text, "World")
print "Replace 'World' with 'Vexel':"
print string_replace(text, "World", "Vexel")
print "Starts with '  Hello':"
print string_starts_with(text, "  Hello")
print ""

# 14. Math Functions
print "14. MATH FUNCTIONS:"
print "math_abs(-42):"
print math_abs(-42)
print "math_add(10, 20):"
print math_add(10, 20)
print "math_subtract(20, 10):"
print math_subtract(20, 10)
print "math_multiply(5, 6):"
print math_multiply(5, 6)
print "math_divide(20, 4):"
print math_divide(20, 4)
print "math_power(2, 8):"
print math_power(2, 8)
print "math_sqrt(16):"
print math_sqrt(16)
print ""

# 15. Object Functions
print "15. OBJECT FUNCTIONS:"
set obj {a: 1, b: 2, c: 3}
print "Object:"
print obj
print "Keys:"
print object_keys(obj)
print "Values:"
print object_values(obj)
print "Has property 'b':"
print object_has_property(obj, "b")
set obj2 {c: 30, d: 4}
print "Merged with {c: 30, d: 4}:"
print object_merge(obj, obj2)
print ""

# 16. Complex Nested Structures
print "16. COMPLEX NESTED STRUCTURES:"
set company {
    name: "TechCorp",
    employees: [
        {
            id: 1,
            name: "Alice",
            projects: [
                {name: "Project A", status: "completed"},
                {name: "Project B", status: "in-progress"}
            ]
        },
        {
            id: 2,
            name: "Bob",
            projects: [
                {name: "Project C", status: "planning"}
            ]
        }
    ],
    stats: {
        total_employees: 2,
        active_projects: 3,
        locations: ["NYC", "SF", "London"]
    }
}

print "Company structure:"
print company
print ""
print "First employee's name:"
print array_get(company.employees, 0).name
print "Company locations:"
print company.stats.locations
print ""

# 17. Type Checking and Core Functions
print "17. CORE FUNCTIONS:"
print "Type of num:"
print type_of(num)
print "Type of str:"
print type_of(str)
print "Type of arr (will show 'unknown'):"
print type_of(arr)
print "Type of person (will show 'unknown'):"
print type_of(person)
print "Is null check:"
print is_null(nothing)
print is_null(num)
print ""

# 18. String Manipulation
print "18. STRING MANIPULATION:"
set s1 "Hello"
set s2 "World"
print "Concatenating strings:"
print string_concat(s1, " ", s2)
print "Substring (0, 5):"
print string_substring(string_concat(s1, " ", s2), 0, 5)
print ""

# 19. Nested Array/Object Access
print "19. NESTED ACCESS PATTERNS:"
set data {
    matrix: [[1, 2], [3, 4]],
    users: {
        admin: {permissions: ["read", "write", "delete"]},
        guest: {permissions: ["read"]}
    }
}
print "Matrix element [1][1]:"
print array_get(array_get(data.matrix, 1), 1)
print "Admin permissions:"
print data.users.admin.permissions
print ""

print "=== ALL TESTS COMPLETED ==="